void traverseLeft(Node* root, vector<int> &ans){
    if((root == NULL) || (root->left == NULL && root->right == NULL)){
        return;
    }

    ans.push_back(root->data);
    if(root->left){
       traverseLeft(root->left, ans);
    }
    else{
       traverseLeft(root->right, ans);
    }
}

void traverseLeaf(Node* root, vector<int> &ans){
    if(root == NULL){
        return;
    }

    if(root->left == NULL && root->right == NULL){
        ans.push_back(root->data);
        return;
    }

    traverseLeaf(root->left, ans);
    traverseLeaf(root->right, ans);
}

void traverseRight(Node* root, vector<int> &ans){
    if((root == NULL) || (root->left == NULL && root->right == NULL)){
        return;
    }
    if(root->right){
       traverseLeft(root->right, ans);
    }
    else{
       traverseLeft(root->left, ans);
    }
    ans.push_back(root->data);
}

vector<int> boundary(Node* root){
    vector<int> ans;
    if(root == NULL)
      return ans;

    // first we are storing root data

    ans.push_back(root->data);

    // then we are storing root's left data  

    traverseLeft(root->left, ans);

   // after that we are storing leaf data which is on left side

    traverseLeaf(root->left, ans);

   // after that we are storing leaf data which is on right side

    traverseLeaf(root->right, ans);

   // and finally we are storing root's right data 

    traverseRight(root->right, ans);

    return ans;
}